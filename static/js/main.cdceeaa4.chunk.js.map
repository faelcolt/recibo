{"version":3,"sources":["images/cabecalho.jpeg","Recibo.js","serviceWorker.js","index.js"],"names":["module","exports","Cabecalho","p2","p","data","Date","ano","getFullYear","mes","getMonth","dia","getDate","hoje","style","display","htmlFor","type","name","id","flex","minWidth","defaultValue","Tabela","overflow","width","className","Linha","colSpan","scope","textAlign","Recibo","margin","src","cabeçalho","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,wC,8KCuB3C,SAASC,IACL,IAAMC,EAAK,SAAAC,GAAC,OAAKA,EAAI,GAAK,IAAMA,EAAIA,GAE9BC,EAAO,IAAIC,KACXC,EAAMF,EAAKG,cACXC,EAAMN,EAAGE,EAAKK,WAAa,GAC3BC,EAAMR,EAAGE,EAAKO,WACdC,EAAI,UAAMF,EAAN,YAAaF,EAAb,YAAoBF,GAE9B,OACI,oCACI,yBAAKO,MAAO,CAAEC,QAAS,SACnB,2BAAOC,QAAQ,QAAf,aACA,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOL,MAAO,CAAEM,KAAM,MAG5D,yBAAKN,MAAO,CAAEC,QAAS,SACnB,2BAAOC,QAAQ,eAAf,iBACA,2BACIC,KAAK,OACLC,KAAK,cACLC,GAAG,cACHL,MAAO,CAAEM,KAAM,MAIvB,yBAAKN,MAAO,CAAEC,QAAS,SACnB,2BAAOC,QAAQ,YAAf,cACA,2BACIC,KAAK,MACLC,KAAK,WACLC,GAAG,WACHL,MAAO,CAAEO,SAAU,QAASD,KAAM,cAGtC,2BACIH,KAAK,OACLC,KAAK,OACLC,GAAG,OACHG,aAAcT,EACdC,MAAO,CAAEO,SAAU,YAOvC,SAASE,IACL,OACI,yBAAKT,MAAO,CAAEU,SAAU,SACpB,+BACI,kCACI,yBAAKV,MAAO,CAAEW,MAAO,SACrB,8BACA,yBAAKX,MAAO,CAAEW,MAAO,SACrB,yBAAKX,MAAO,CAAEW,MAAO,UAEzB,+BACI,4BACI,wBAAIC,UAAU,iBAAd,QACA,+CACA,wBAAIA,UAAU,iBAAd,qBACA,wBAAIA,UAAU,iBAAd,iBAGR,+BACK,kBAACC,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,OAEL,+BACI,4BACI,wBACIC,QAAQ,IACRC,MAAM,MACNf,MAAO,CAAEgB,UAAW,UAHxB,eAOA,4BACI,2BAAOJ,UAAU,uBAS7C,SAASC,IACL,OACI,4BACI,4BACI,2BAAOV,KAAK,OAAOS,UAAU,mBAEjC,4BACI,2BAAOT,KAAK,UAEhB,4BACI,2BAAOA,KAAK,OAAOS,UAAU,mBAEjC,4BACI,2BAAOT,KAAK,OAAOS,UAAU,oBAM9BK,MAnIf,WACI,OACI,yBAAKjB,MAAO,CAAEkB,OAAQ,QAClB,2BAAOf,KAAK,OAAOC,KAAK,SAASJ,MAAO,CAAEC,QAAS,UAEnD,yBAAKD,MAAO,CAAEW,MAAO,SACjB,yBACIX,MAAO,CAAEW,MAAO,QAChBQ,IAAKC,IACLC,IAAI,4BAIZ,kBAACjC,EAAD,MACA,kBAACqB,EAAD,QCNQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cdceeaa4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cabecalho.bb76dfc9.jpeg\";","import React from 'react';\r\nimport './Recibo.css';\r\nimport cabeçalho from './images/cabecalho.jpeg';\r\n\r\nfunction Recibo() {\r\n    return (\r\n        <div style={{ margin: '8px' }}>\r\n            <input type='file' name='imagem' style={{ display: 'none' }} />\r\n\r\n            <div style={{ width: '100%' }}>\r\n                <img\r\n                    style={{ width: '100%' }}\r\n                    src={cabeçalho}\r\n                    alt='Imagem do Cabeçalho'\r\n                />\r\n            </div>\r\n\r\n            <Cabecalho />\r\n            <Tabela />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Cabecalho() {\r\n    const p2 = p => (p < 10 ? '0' + p : p);\r\n\r\n    const data = new Date();\r\n    const ano = data.getFullYear();\r\n    const mes = p2(data.getMonth() + 1);\r\n    const dia = p2(data.getDate());\r\n    const hoje = `${dia}/${mes}/${ano}`;\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex' }}>\r\n                <label htmlFor='nome'>Cliente: </label>\r\n                <input type='text' name='nome' id='nome' style={{ flex: 1 }} />\r\n            </div>\r\n\r\n            <div style={{ display: 'flex' }}>\r\n                <label htmlFor='endereço'>Endereço: </label>\r\n                <input\r\n                    type='text'\r\n                    name='endereço'\r\n                    id='endereço'\r\n                    style={{ flex: 1 }}\r\n                />\r\n            </div>\r\n\r\n            <div style={{ display: 'flex' }}>\r\n                <label htmlFor='telefone'>Telefone: </label>\r\n                <input\r\n                    type='tel'\r\n                    name='telefone'\r\n                    id='telefone'\r\n                    style={{ minWidth: '120px', flex: '1 1 100%' }}\r\n                />\r\n\r\n                <input\r\n                    type='text'\r\n                    name='data'\r\n                    id='data'\r\n                    defaultValue={hoje}\r\n                    style={{ minWidth: '85px' }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Tabela() {\r\n    return (\r\n        <div style={{ overflow: 'auto' }}>\r\n            <table>\r\n                <colgroup>\r\n                    <col style={{ width: '10%' }} />\r\n                    <col />\r\n                    <col style={{ width: '20%' }} />\r\n                    <col style={{ width: '20%' }} />\r\n                </colgroup>\r\n                <thead>\r\n                    <tr>\r\n                        <th className='number-format'>Qtd.</th>\r\n                        <th>Descrição</th>\r\n                        <th className='number-format'>Valor Unitário</th>\r\n                        <th className='number-format'>Valor Total</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {<Linha />}\r\n                    {<Linha />}\r\n                    {<Linha />}\r\n                    {<Linha />}\r\n                    {<Linha />}\r\n                    {<Linha />}\r\n                    {<Linha />}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <th\r\n                            colSpan='3'\r\n                            scope='row'\r\n                            style={{ textAlign: 'right' }}\r\n                        >\r\n                            Total Geral\r\n                        </th>\r\n                        <td>\r\n                            <input className='number-format' />\r\n                        </td>\r\n                    </tr>\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Linha() {\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <input type='text' className='number-format' />\r\n            </td>\r\n            <td>\r\n                <input type='text' />\r\n            </td>\r\n            <td>\r\n                <input type='text' className='number-format' />\r\n            </td>\r\n            <td>\r\n                <input type='text' className='number-format' />\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Recibo;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Recibo from './Recibo';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Recibo />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}